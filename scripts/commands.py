import asyncio
import os
import platform
import socket
import subprocess
import sys
import threading
import time
from pathlib import Path
from typing import Optional

import asyncpg
import uvicorn

from app.core.dependencies import database_client, get_db_session
from app.core.security.password import pwd_context
from app.models import User


class DockerDaemonNotRunningError(Exception):
    def __init__(self, message=None):
        self.message = (
            message
            or "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Docker Desktop –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç."
        )
        super().__init__(self.message)


class DockerContainerConflictError(Exception):
    def __init__(self, container_name=None, message=None):
        if container_name:
            self.message = (
                message
                or f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '{container_name}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –£–¥–∞–ª–∏ –µ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π."
            )
        else:
            self.message = (
                message
                or "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –£–¥–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π –µ–≥–æ."
            )
        super().__init__(self.message)


TEST_ENV_FILE = ".env.test"
DEV_ENV_FILE = ".env.dev"
ROOT_DIR = Path(__file__).parents[1]

COMPOSE_FILE_WITHOUT_BACKEND = "docker-compose.dev.yml"

DEFAULT_PORTS = {
    "FASTAPI": 8000,
    "RABBITMQ": 5672,
    "RABBITMQ_UI": 15672,
    "POSTGRES": 5432,
    "REDIS": 6380,
    "PGADMIN": 5050,
    "REDIS_COMMANDER": 8081,
}


def load_env_vars(env_file_path: str = None) -> dict:
    if env_file_path is None:
        dev_env_path = ROOT_DIR / DEV_ENV_FILE
        test_env_path = ROOT_DIR / TEST_ENV_FILE

        if dev_env_path.exists():
            env_file_path = str(dev_env_path)
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º dev –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {DEV_ENV_FILE}")
        elif test_env_path.exists():
            env_file_path = str(test_env_path)
            print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {TEST_ENV_FILE}")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env.dev –∏–ª–∏ .env.test)")
            return {}

    env_vars = {}
    if os.path.exists(env_file_path):
        with open(env_file_path, encoding="utf-8") as f:
            for line in f:
                if line.strip() and not line.startswith("#"):
                    try:
                        key, value = line.strip().split("=", 1)
                        value = value.strip("\"'")
                        env_vars[key] = value
                    except ValueError:
                        pass
    else:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file_path}")

    return env_vars


def run_compose_command(
    command: str | list,
    compose_file: str = COMPOSE_FILE_WITHOUT_BACKEND,
    env: dict = None,
) -> None:
    if isinstance(command, str):
        command = command.split()

    compose_path = os.path.join(ROOT_DIR, compose_file)
    if not os.path.exists(compose_path):
        print(f"‚ùå –§–∞–π–ª {compose_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {ROOT_DIR}")
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {compose_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {ROOT_DIR}")

    env_path = os.path.join(ROOT_DIR, DEV_ENV_FILE)
    if not os.path.exists(env_path):
        print(f"‚ùå –§–∞–π–ª {DEV_ENV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {ROOT_DIR}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.dev —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise FileNotFoundError(
            f"‚ùå –§–∞–π–ª {DEV_ENV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
        )

    environment = os.environ.copy()
    environment.update(load_env_vars())
    if env:
        environment.update(env)

    # show_output = any(cmd in command for cmd in ['up', 'build'])

    try:
        subprocess.run(
            ["docker-compose", "-f", compose_file] + command,
            cwd=ROOT_DIR,
            check=True,
            env=environment,
            # capture_output=not show_output,
            text=True,
        )
    except subprocess.CalledProcessError as e:
        error_output = e.stderr or e.stdout or str(e)
        if (
            "docker daemon is not running" in error_output
            or "pipe/docker_engine" in error_output
        ):
            raise DockerDaemonNotRunningError() from e
        elif (
            "Conflict" in error_output
            and "is already in use by container" in error_output
        ):
            import re

            container_match = re.search(r'The container name "([^"]+)"', error_output)
            container_name = container_match.group(1) if container_match else None
            raise DockerContainerConflictError(container_name) from e
        raise


def find_free_port(start_port: int = 8000) -> int:
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(("", port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")


def get_available_port(default_port: int) -> int:
    port = default_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(("", port))
                return port
        except OSError:
            port += 1
    raise RuntimeError(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ {default_port}")


def is_port_free(port: int) -> bool:
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(("", port))
            return True
    except OSError:
        return False


def get_port(service: str) -> int:
    service_upper = service.upper().replace("_PORT", "")
    return int(os.getenv(service, DEFAULT_PORTS[service_upper]))


def show_loader(message: str, stop_event: threading.Event):
    chars = "‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    i = 0
    while not stop_event.is_set():
        sys.stdout.write(f"\r{chars[i % len(chars)]} {message}")
        sys.stdout.flush()
        time.sleep(0.1)
        i += 1
    sys.stdout.write("\r" + " " * (len(message) + 2) + "\r")
    sys.stdout.flush()


def check_service(name: str, port: int, retries: int = 10, delay: int = 3) -> bool:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(retries):
        try:
            sock.connect(("localhost", port))
            sock.close()
            return True
        except:
            print(f"‚è≥ –ñ–¥—ë–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            time.sleep(delay)
    return False


def check_services():
    services_config = {
        "Redis": ("REDIS_PORT", 5),
        "RabbitMQ": ("RABBITMQ_UI_PORT", 20),
        "PostgreSQL": ("POSTGRES_PORT", 30),
    }

    for service_name, (port_key, retries) in services_config.items():
        port = get_port(port_key)
        if not check_service(service_name, port, retries):
            print(f"‚ùå {service_name} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}!")
            return False
    return True


def get_postgres_container_name() -> str:
    try:
        which_result = subprocess.run(
            ["which", "docker"], capture_output=True, text=True
        )
        if which_result.returncode != 0:
            print("‚ÑπÔ∏è Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            return "postgres"

        result = subprocess.run(
            ["docker", "ps", "--filter", "name=postgres", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True,
        )
        containers = [name for name in result.stdout.strip().split("\n") if name]
        if not containers:
            print(
                "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            )
            return "postgres"
        return containers[0]
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL —á–µ—Ä–µ–∑ Docker: {e}")
        return "postgres"
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "postgres"


def create_database():
    print("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    db_config = load_env_vars()

    postgres_container = get_postgres_container_name()
    print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL: {postgres_container}")

    user = db_config.get("POSTGRES_USER", "postgres")
    password = db_config.get("POSTGRES_PASSWORD", "")
    host = db_config.get("POSTGRES_HOST", "localhost")
    port = db_config.get("POSTGRES_PORT", "5432")
    db_name = db_config.get("POSTGRES_DB", "aichat_db")

    try:
        which_docker = subprocess.run(["which", "docker"], capture_output=True)
        docker_available = which_docker.returncode == 0

        if docker_available:
            check_db_inside = subprocess.run(
                [
                    "docker",
                    "exec",
                    "-i",
                    postgres_container,
                    "psql",
                    "-U",
                    user,
                    "-c",
                    f"SELECT 1 FROM pg_database WHERE datname = '{db_name}';",
                ],
                capture_output=True,
                text=True,
            )

            if "1 row" not in check_db_inside.stdout:
                print(
                    f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Å–æ–∑–¥–∞—ë–º..."
                )
                create_cmd = [
                    "docker",
                    "exec",
                    "-i",
                    postgres_container,
                    "psql",
                    "-U",
                    user,
                    "-c",
                    f"CREATE DATABASE {db_name};",
                ]
                subprocess.run(create_cmd, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
        else:
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...")

            psql_command = f"psql -U {user} -h {host} -p {port}"
            if password:
                env = os.environ.copy()
                env["PGPASSWORD"] = password
            else:
                env = os.environ.copy()

            check_db = subprocess.run(
                f"{psql_command} -c \"SELECT 1 FROM pg_database WHERE datname = '{db_name}';\"",
                shell=True,
                env=env,
                capture_output=True,
                text=True,
            )

            if "1 row" not in check_db.stdout:
                print(f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...")
                create_cmd = f'{psql_command} -c "CREATE DATABASE {db_name};"'
                subprocess.run(create_cmd, shell=True, env=env, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

        dsn = f"postgresql://{user}:*******@{host}:{port}/{db_name}"
        print(f"üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {dsn} (–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç)")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def start_infrastructure():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...")

    env_vars = load_env_vars()

    busy_ports = []
    for service, default_port in DEFAULT_PORTS.items():
        port = int(env_vars.get(f"{service}_PORT", default_port))
        if not is_port_free(port):
            busy_ports.append(f"{service}: {port}")

    if busy_ports:
        print("‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã:")
        for port_info in busy_ports:
            print(f"   - {port_info}")
        print("üí° –û—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —ç—Ç–∏—Ö –ø–æ—Ä—Ç–∞—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –ø–æ—Ä—Ç—ã –≤ .env.dev")
        return False

    try:
        try:
            docker_info = subprocess.run(
                ["docker", "info"], capture_output=True, text=True, check=True
            )
            print("‚úÖ Docker –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except subprocess.CalledProcessError as e:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Docker:")
            if "permission denied" in str(e.stderr).lower():
                print(
                    "üí° –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Docker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            elif "cannot connect to the docker daemon" in str(e.stderr).lower():
                print("üí° Docker Daemon –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ:")
                print("   1. Docker Desktop —Ç–æ—á–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                print("   2. –°–ª—É–∂–±–∞ Docker Engine —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("   3. –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å WSL –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–ª—É–∂–±–∞–º–∏")
            raise DockerDaemonNotRunningError()

        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
        ps_result = subprocess.run(
            ["docker", "ps", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True,
        )
        if ps_result.stdout.strip():
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
            for container in ps_result.stdout.strip().split("\n"):
                print(f"   - {container}")

        try:
            run_compose_command("down --remove-orphans")
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if (
                "docker daemon is not running" in error_output
                or "pipe/docker_engine" in error_output
            ):
                raise DockerDaemonNotRunningError()
            raise

        try:
            subprocess.run(["docker", "volume", "prune", "-f"], check=True)
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if (
                "docker daemon is not running" in error_output
                or "pipe/docker_engine" in error_output
            ):
                raise DockerDaemonNotRunningError()
            raise

        ports = {
            service: get_available_port(default_port)
            for service, default_port in DEFAULT_PORTS.items()
        }

        env = {f"{service}_PORT": str(port) for service, port in ports.items()}
        stop_loader = threading.Event()
        loader_thread = threading.Thread(target=show_loader, args=("", stop_loader))
        loader_thread.start()

        try:
            run_compose_command(["up", "-d"], COMPOSE_FILE_WITHOUT_BACKEND, env=env)
        except subprocess.CalledProcessError as e:
            error_output = str(e)
            if (
                "docker daemon is not running" in error_output
                or "pipe/docker_engine" in error_output
            ):
                raise DockerDaemonNotRunningError()
            elif (
                "Conflict" in error_output
                and "is already in use by container" in error_output
            ):
                import re

                container_match = re.search(
                    r'The container name "([^"]+)"', error_output
                )
                container_name = container_match.group(1) if container_match else None
                raise DockerContainerConflictError(container_name)
            raise
        finally:
            stop_loader.set()
            loader_thread.join()
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!")

        check_services()

        print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        migrate()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

        print("\n" + "=" * 60)
        print("üéØ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê")
        print("=" * 60)

        print("\nüì° –°–ï–†–í–ò–°–´:")
        print(f"üìä FastAPI Swagger:    http://localhost:{ports['FASTAPI']}/docs")
        print(f"üê∞ RabbitMQ:       http://localhost:{ports['RABBITMQ_UI']}")
        print(f"üóÑÔ∏è PostgreSQL:        localhost:{ports['POSTGRES']}")
        print(f"üì¶ Redis:             localhost:{ports['REDIS']}")

        print("\nüîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò:")
        print(f"üîç PgAdmin:           http://localhost:{ports['PGADMIN']}")
        print(f"üìä Redis Commander:    http://localhost:{ports['REDIS_COMMANDER']}")

        print("\nüîë –î–û–°–¢–£–ü–´:")
        print(
            f"üîç PgAdmin:           {env_vars.get('PGADMIN_DEFAULT_EMAIL', 'admin@admin.com')} / {env_vars.get('PGADMIN_DEFAULT_PASSWORD', 'admin')}"
        )
        print(
            f"üê∞ RabbitMQ:          {env_vars.get('RABBITMQ_USER', 'guest')} / {env_vars.get('RABBITMQ_PASS', 'guest')}"
        )
        print(
            f"üóÑÔ∏è PostgreSQL:        {env_vars.get('POSTGRES_USER', 'postgres')} / {env_vars.get('POSTGRES_PASSWORD', 'postgres')}"
        )

        return True
    except DockerDaemonNotRunningError as e:
        print(f"‚ùå {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏ Docker Desktop –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –æ–ª—É—Ö.")
        return False
    except DockerContainerConflictError as e:
        print(f"‚ùå {e}")
        print("üí° –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        print("```")
        print("docker rm -f $(docker ps -aq)")
        print("```")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False


def setup():
    system = platform.system()
    if system == "Windows":
        subprocess.run(["powershell", "-File", "scripts/setup.ps1"], check=True)
    else:
        subprocess.run(["bash", "scripts/setup.sh"], check=True)


def activate():
    system = platform.system()
    if system == "Windows":
        subprocess.run(["powershell", "-File", "scripts/activate.ps1"], check=True)
    else:
        subprocess.run(["bash", "scripts/activate.sh"], check=True)


def dev(port: Optional[int] = None):
    project_root = Path(__file__).parent.parent
    sys.path.append(str(project_root))

    if not start_infrastructure():
        return

    if port is None:
        port = find_free_port()

    print("\n" + "=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö FASTAPI –°–ï–†–í–ï–†–ê")
    print("=" * 60)
    print(f"üåê –ê–¥—Ä–µ—Å: http://localhost:{port}")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{port}/docs")
    print(f"üîÑ Hot Reload: –≤–∫–ª—é—á—ë–Ω")
    print("=" * 60 + "\n")

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
        access_log=False,
    )


def serve(port: Optional[int] = None):
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run(
        [
            "uvicorn",
            "app.main:app",
            "--host",
            "0.0.0.0",
            "--port",
            str(port),
            "--proxy-headers",
            "--forwarded-allow-ips=*",
        ],
        check=True,
    )


def migrate():
    subprocess.run(["alembic", "upgrade", "head"], check=True)


async def create_superuser():
    await database_client.connect()

    session_gen = get_db_session()
    session = await anext(session_gen)
    try:
        username = input("Enter username: ")
        first_name = input("Enter first_name: ")
        last_name = input("Enter last_name: ")
        email = input("Enter email: ")
        password = input("Enter password: ")

        hashed_password = pwd_context.hash(password)

        superuser = User(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            password=hashed_password,
            is_verified=True,
            is_superuser=True,
        )
        session.add(superuser)
        await session.commit()
        print(f"‚úÖ Superuser '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    finally:
        await session_gen.aclose()
        await database_client.close()


def run_create_superuser():
    asyncio.run(create_superuser())


def test(
    path: str = "tests/",
    marker: str = None,
    verbose: bool = True,
    output_file: str = None,
):
    print("üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    if not create_test_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    env = os.environ.copy()
    env["DEV_ENV_FILE"] = ".env.test"

    cmd = ["pytest", path]

    if verbose:
        cmd.append("-v")

    if marker:
        cmd.extend(["-m", marker])

    cmd.append("--tb=short")  # –ö–æ—Ä–æ—Ç–∫–∏–π traceback

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {' '.join(cmd)}")

    try:
        if output_file:
            with open(output_file, "w") as f:
                subprocess.run(
                    cmd, env=env, stdout=f, stderr=subprocess.STDOUT, check=True
                )
        else:
            subprocess.run(cmd, env=env, check=True)
    except subprocess.CalledProcessError:
        pass


# def create_test_database():
#     print("üõ†Ô∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

#     db_config = load_env_vars()

#     postgres_container = get_postgres_container_name()
#     print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL: {postgres_container}")

#     user = db_config.get('POSTGRES_USER', 'postgres')
#     password = db_config.get('POSTGRES_PASSWORD', '')
#     host = db_config.get('POSTGRES_HOST', 'localhost')
#     port = db_config.get('POSTGRES_PORT', '5432')
#     db_name = db_config.get('POSTGRES_DB', 'gidrator_db')
#     test_db_name = f"{db_name}_test"

#     try:
#         which_docker = subprocess.run(["which", "docker"], capture_output=True)
#         docker_available = which_docker.returncode == 0

#         if docker_available and postgres_container != "postgres":
#             print(f"üê≥ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {postgres_container}")

#             subprocess.run(
#                 ["docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
#                 f"DROP DATABASE IF EXISTS {test_db_name};"],
#                 capture_output=True, text=True
#             )

#             # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
#             create_cmd = [
#                 "docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
#                 f"CREATE DATABASE {test_db_name};"
#             ]
#             result = subprocess.run(create_cmd, capture_output=True, text=True)

#             if result.returncode == 0:
#                 print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!")
#             else:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {result.stderr}")
#                 return False
#         else:
#             print(f"üîÑ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...")

#             psql_command = f"psql -U {user} -h {host} -p {port}"
#             if password:
#                 env = os.environ.copy()
#                 env["PGPASSWORD"] = password
#             else:
#                 env = os.environ.copy()

#             drop_cmd = f"{psql_command} -c \"DROP DATABASE IF EXISTS {test_db_name};\""
#             subprocess.run(drop_cmd, shell=True, env=env, capture_output=True)

#             create_cmd = f"{psql_command} -c \"CREATE DATABASE {test_db_name};\""
#             result = subprocess.run(create_cmd, shell=True, env=env, capture_output=True, text=True)

#             if result.returncode == 0:
#                 print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞!")
#             else:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {result.stderr}")
#                 return False

#         test_dsn = f"postgresql://{user}:*******@{host}:{port}/{test_db_name}"
#         print(f"üîÑ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: {test_dsn}")

#         return True
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
#         return False


async def create_test_database_async():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è asyncpg (–±–µ–∑ psql).
    """
    print("üõ†Ô∏è –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    db_config = load_env_vars()

    if not db_config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î")
        return False

    user = db_config.get("POSTGRES_USER", "postgres")
    password = db_config.get("POSTGRES_PASSWORD", "")
    host = db_config.get("POSTGRES_HOST", "localhost")
    port = int(db_config.get("POSTGRES_PORT", "5432"))
    db_name = db_config.get("POSTGRES_DB", "gidrator_db")
    test_db_name = f"{db_name}_test"

    print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} –∫–∞–∫ {user}")

    try:
        conn = await asyncpg.connect(
            user=user,
            password=password,
            host=host,
            port=port,
            database="postgres",
        )

        await conn.execute(f'DROP DATABASE IF EXISTS "{test_db_name}"')
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–î {test_db_name} (–µ—Å–ª–∏ –±—ã–ª–∞)")

        await conn.execute(f'CREATE DATABASE "{test_db_name}"')
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_name} —Å–æ–∑–¥–∞–Ω–∞!")

        await conn.close()

        test_dsn = f"postgresql://{user}:*******@{host}:{port}/{test_db_name}"
        print(f"üîÑ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞: {test_dsn}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_test_database():
    return asyncio.run(create_test_database_async())


def start_all():
    migrate()
    serve()
