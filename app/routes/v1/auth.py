from typing import Optional

from fastapi import Cookie, Depends, Header, Query, Response
from fastapi.security import OAuth2PasswordRequestForm
from redis import Redis
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.dependencies import get_db_session, get_redis_client
from app.core.exceptions import TokenMissingError
from app.routes.base import BaseRouter
from app.schemas import (
    ForgotPasswordSchema,
    InvalidCredentialsResponseSchema,
    LogoutResponseSchema,
    PasswordResetConfirmResponseSchema,
    PasswordResetConfirmSchema,
    PasswordResetResponseSchema,
    RateLimitExceededResponseSchema,
    TokenExpiredResponseSchema,
    TokenInvalidResponseSchema,
    TokenMissingResponseSchema,
    TokenResponseSchema,
    UserInactiveResponseSchema,
    WeakPasswordResponseSchema,
)
from app.services.v1.auth.service import AuthService


class AuthRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="auth", tags=["Authentication"])

    def configure(self):
        @self.router.post(
            path="",
            response_model=TokenResponseSchema,
            summary="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            responses={
                200: {
                    "model": TokenResponseSchema,
                    "description": "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                },
                401: {
                    "model": InvalidCredentialsResponseSchema,
                    "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                },
                403: {
                    "model": UserInactiveResponseSchema,
                    "description": "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        async def authenticate(
            response: Response,
            form_data: OAuth2PasswordRequestForm = Depends(),
            use_cookies: bool = Query(
                False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"
            ),
            session: AsyncSession = Depends(get_db_session),
            redis: Optional[Redis] = Depends(get_redis_client),
        ) -> TokenResponseSchema:
            """
            ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–æ–≤

            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã.

            ### –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
            * **Email-–∞–¥—Ä–µ—Å**: user@example.com
            * **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: john_doe
            * **–¢–µ–ª–µ—Ñ–æ–Ω**: +7 (XXX) XXX-XX-XX

            ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            * **username**: Email, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
            * **password**: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **use_cookies**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—É–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)

            ### Returns:
            * **success**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            * **access_token**: JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –º–∏–Ω—É—Ç)
            * **refresh_token**: Refresh —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π)
            * **token_type**: –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (Bearer)
            * **expires_in**: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            """
            return await AuthService(session, redis).authenticate(
                form_data, response, use_cookies
            )

        @self.router.post(
            path="/refresh",
            response_model=TokenResponseSchema,
            summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞",
            responses={
                200: {
                    "model": TokenResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                },
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "Refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "Refresh —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π refresh —Ç–æ–∫–µ–Ω",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        async def refresh_token(
            response: Response,
            use_cookies: bool = Query(
                False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"
            ),
            refresh_token_header: str = Header(None, alias="refresh-token"),
            refresh_token_cookie: str = Cookie(None, alias="refresh_token"),
            session: AsyncSession = Depends(get_db_session),
            redis: Optional[Redis] = Depends(get_redis_client),
        ) -> TokenResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞

            –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ access —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞.
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ access —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–æ refresh —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

            ### –ó–∞–≥–æ–ª–æ–≤–∫–∏:
            * **refresh_token_header**: Refresh —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            * **refresh_token_cookie**: Refresh —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É–∫–∏)
            * **use_cookies**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—É–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)

            ### Returns:
            * **success**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                * **access_token**: –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
                * **refresh_token**: –ù–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω (—Ä–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤)
                * **token_type**: –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (Bearer)
                * **expires_in**: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –Ω–æ–≤–æ–≥–æ access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

            ### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
            * Refresh —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            * –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
            * –°—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            """
            refresh_token = refresh_token_header or refresh_token_cookie

            if not refresh_token:
                raise TokenMissingError()

            return await AuthService(session, redis).refresh_token(
                refresh_token, response, use_cookies
            )

        @self.router.post(
            path="/logout",
            response_model=LogoutResponseSchema,
            summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            responses={
                200: {
                    "model": LogoutResponseSchema,
                    "description": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                },
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
                },
            },
        )
        async def logout(
            response: Response,
            clear_cookies: bool = Query(False, description="–û—á–∏—Å—Ç–∏—Ç—å –∫—É–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"),
            authorization: str = Header(None, description="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"),
            access_token_cookie: str = Cookie(None, alias="access_token"),
            session: AsyncSession = Depends(get_db_session),
            redis: Optional[Redis] = Depends(get_redis_client),
        ) -> LogoutResponseSchema:
            """
            ## üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

            –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.
            –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏.

            ### –ó–∞–≥–æ–ª–æ–≤–∫–∏:
            * **authorization**: Bearer —Ç–æ–∫–µ–Ω –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏

            ### Returns:
            * **success**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –≤—ã—Ö–æ–¥–µ
            * **logged_out_at**: –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

            ### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
            * –¢–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            * –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è
            * –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            """
            if not authorization and access_token_cookie:
                authorization = f"Bearer {access_token_cookie}"

            return await AuthService(session, redis).logout(
                authorization, response, clear_cookies
            )

        @self.router.post(
            path="/forgot-password",
            response_model=PasswordResetResponseSchema,
            summary="–ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
            responses={
                200: {
                    "model": PasswordResetResponseSchema,
                    "description": "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                },
                404: {"description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω"},
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
                },
            },
        )
        async def forgot_password(
            request: ForgotPasswordSchema,
            session: AsyncSession = Depends(get_db_session),
            redis: Optional[Redis] = Depends(get_redis_client),
        ) -> PasswordResetResponseSchema:
            """
            ## üìß –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å.
            –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

            ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            * **email**: Email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

            ### Returns:
            * **success**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏
            * **email**: Email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞
            * **expires_in**: –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

            ### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
            * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
            * –°—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            * –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            """
            return await AuthService(session, redis).send_password_reset_email(
                request.email
            )

        @self.router.post(
            path="/reset-password",
            response_model=PasswordResetConfirmResponseSchema,
            summary="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
            responses={
                200: {
                    "model": PasswordResetConfirmResponseSchema,
                    "description": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
                },
                400: {
                    "model": WeakPasswordResponseSchema,
                    "description": "–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                },
            },
        )
        async def reset_password(
            reset_data: PasswordResetConfirmSchema,
            session: AsyncSession = Depends(get_db_session),
            redis: Optional[Redis] = Depends(get_redis_client),
        ) -> PasswordResetConfirmResponseSchema:
            """
            ## üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è

            –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
            –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ —Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞ email.

            ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            * **token**: –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ email —Å—Å—ã–ª–∫–∏
            * **new_password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **confirm_password**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è

            ### Returns:
            * **success**: –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
            * **password_changed_at**: –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

            ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:
            * –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤
            * –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
            * –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            * –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏

            ### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
            * –¢–æ–∫–µ–Ω—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            * –ü–∞—Ä–æ–ª–∏ —Ö–µ—à–∏—Ä—É—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt
            * –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è
            * –¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            """
            return await AuthService(session, redis).reset_password(reset_data)
