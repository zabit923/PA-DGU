from typing import Any, Dict, Optional

from app.core.exceptions.base import BaseAPIException


class AuthenticationError(BaseAPIException):
    def __init__(
        self,
        detail: str = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        error_type: str = "authentication_error",
        status_code: int = 401,
        extra: Optional[Dict[str, Any]] = None,
    ):
        super().__init__(
            status_code=status_code,
            detail=detail,
            error_type=error_type,
            extra=extra or {},
        )


class InvalidCredentialsError(AuthenticationError):
    def __init__(self):
        super().__init__(
            detail="üîê –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            error_type="invalid_credentials",
        )


class InvalidEmailFormatError(AuthenticationError):
    def __init__(self, email: str):
        super().__init__(
            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {email}",
            error_type="invalid_email_format",
            extra={"email": email},
        )


class InvalidPasswordError(AuthenticationError):
    def __init__(self):
        super().__init__(
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
            error_type="invalid_password",
        )


class InvalidCurrentPasswordError(AuthenticationError):
    def __init__(self):
        super().__init__(
            detail="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω",
            error_type="invalid_current_password",
        )


class WeakPasswordError(AuthenticationError):
    def __init__(
        self,
        detail: str = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –∏–º–µ—Ç—å –∑–∞–≥–ª–∞–≤–Ω—É—é –∏ —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª",
    ):
        super().__init__(
            detail=detail,
            error_type="weak_password",
        )


class TokenError(AuthenticationError):
    def __init__(
        self,
        detail: str,
        error_type: str = "token_error",
        status_code: int = 401,
        extra: Optional[Dict[str, Any]] = None,
    ):
        super().__init__(
            detail=detail,
            error_type=error_type,
            status_code=status_code,
            extra=extra or {"token": True},
        )


class TokenMissingError(TokenError):
    def __init__(self):
        super().__init__(detail="–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", error_type="token_missing")


class TokenExpiredError(TokenError):
    def __init__(self):
        super().__init__(
            detail="–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω", error_type="token_expired", status_code=419
        )


class TokenInvalidError(TokenError):
    def __init__(
        self, detail: str = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", extra: Optional[Dict[str, Any]] = None
    ):
        super().__init__(
            detail=detail, error_type="token_invalid", status_code=422, extra=extra
        )
